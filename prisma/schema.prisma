// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // uses connection pooling
}

model Rep {
  id     String @id @default(cuid())
  name   String @default("")
  reps   String @default("")
  Day    Day[]
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Day {
  id          String     @id @default(cuid())
  day         String     @default("0")
  repId       String
  rep         Rep        @relation(fields: [repId], references: [id], onDelete: Cascade)
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  Challenge   Challenge? @relation(fields: [challengeId], references: [id])
  challengeId String?
}

model Challenge {
  id                String              @id @default(cuid())
  name              String              @default("")
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  Day               Day[]
  userId            String
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  ChallengeStatuses ChallengeStatuses[]
}

model ChallengeStatuses {
  id          String    @id @default(cuid())
  complete    Boolean   @default(false)
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  challengeId String
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String              @id @default(cuid())
  name              String?
  email             String?             @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  Challenge         Challenge[]
  Rep               Rep[]
  Day               Day[]
  ChallengeStatuses ChallengeStatuses[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
